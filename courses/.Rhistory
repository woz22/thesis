a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
d <- data.frame(RC = c(10,15,20), F = 'lens')
exp(predict(m, newdata = d))
m <- glm(DW ~ log2(RC) * F, data = barnacle, family = tweedie(link.power = 0, var.power = 1.7))
#for each location estimate discrete marginal effect of RC length between 10 and 15, and 15 and 20 mm
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
type = 'percent',
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
type = 'percent',
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = c(10, 15, 20), F = c('barca')),
b = list(RC = c(10, 15, 20), F = c('lens')),
type = 'percent',
cnames = c('10', '15', '20'))
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
type = 'percent',
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
type = 'percent',
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = c(10, 15, 20), F = c('lens')),
b = list(RC = c(10, 15, 20), F = c('barca')),
type = 'percent',
cnames = c('10', '15', '20'))
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind( ))
str(mysturgeon)
levels(mysturgeon$size)
head(mysturgeon)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ sex + size, family = cratio, data = pneumo)
library(VGAM)
install.packages('VGAM')
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(trtools)
library(VGAM)
options(digits = 4, scipen = 8)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ sex + size, family = cratio, data = pneumo)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ sex + size, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
str(mysturgeon)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ sex + midpoint, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
str(mysturgeon)
head(mysturgeon)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ midpoint + sex, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
round(exp(cbind(m), confint(m)), 5)
round(exp(cbind(coef(m), confint(m)), 5)
round(exp(cbind(coef(m), confint(m)), 5)
round(exp(coef(m), confint(m)), 5)
round(exp(cbind(coef(m), confint(m))), 5)
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(trtools)
library(VGAM)
library(tidyr)
options(digits = 4, scipen = 8)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ midpoint + sex, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
#plot
d <- expand.grid(sex = c("M","F"), midpoint = seq(80, 130, by = 10))
d <- cbind(d, predict(m, newdata = d, type = "response"))
#d <- gather(d, key = "maturity", value = "probability", immature, mature, ripe)
p <- ggplot(d, aes(x = midpoint, y = probability, color = maturity))
p <- p + geom_line() + ylim(0,1) + theme_bw() + facet_wrap(~sex)
p <- p + labs(x = 'Size Midpoint (cm)', y = 'Probability', color = 'Maturity')
plot(p)
View(d)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ midpoint + sex, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
#plot
d <- expand.grid(sex = c("M","F"), midpoint = seq(80, 130, by = 10))
d <- cbind(d, predict(m, newdata = d, type = "response"))
d <- gather(d, key = "maturity", value = "probability", immature, mature, ripe)
p <- ggplot(d, aes(x = midpoint, y = probability, color = maturity))
p <- p + geom_line() + ylim(0,1) + theme_bw() + facet_wrap(~sex)
p <- p + labs(x = 'Size Midpoint (cm)', y = 'Probability', color = 'Maturity')
plot(p)
#odds ratios
round(exp(cbind(coef(m), confint(m))), 5)
round(exp(cbind(coef(m), confint(m))), 5)
levels(d$maturity)
str(d)
round(exp(cbind(coef(m), confint(m))), 5)
round(exp(cbind(coef(m), confint(m))), 2)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ midpoint + sex, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
#plot
d <- expand.grid(sex = c("M","F"), midpoint = seq(80, 130, by = 10))
d <- cbind(d, predict(m, newdata = d, type = "response"))
d <- gather(d, key = "maturity", value = "probability", immature, mature, ripe)
p <- ggplot(d, aes(x = midpoint, y = probability, color = maturity))
p <- p + geom_line() + ylim(0,1) + theme_bw() + facet_wrap(~sex)
p <- p + labs(x = 'Size Midpoint (cm)', y = 'Probability', color = 'Maturity')
plot(p)
#odds ratios
round(exp(cbind(coef(m), confint(m))), 2)
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(trtools)
library(VGAM)
library(tidyr)
options(digits = 4, scipen = 8)
#convert proportions into frequencies
mysturgeon <- sturgeon
mysturgeon$immature <- with(sturgeon, round(immature * count))
mysturgeon$mature <- with(sturgeon, round(mature * count))
mysturgeon$ripe <- with(sturgeon, round(ripe * count))
m <- vglm(cbind(immature, mature, ripe) ~ midpoint + sex, family = cratio, data = mysturgeon)
cbind(coef(m), confint(m))
#plot
d <- expand.grid(sex = c("M","F"), midpoint = seq(80, 130, by = 10))
d <- cbind(d, predict(m, newdata = d, type = "response"))
d <- gather(d, key = "maturity", value = "probability", immature, mature, ripe)
p <- ggplot(d, aes(x = midpoint, y = probability, color = maturity))
p <- p + geom_line() + ylim(0,1) + theme_bw() + facet_wrap(~sex)
p <- p + labs(x = 'Size Midpoint (cm)', y = 'Probability', color = 'Maturity')
plot(p)
#odds ratios
round(exp(cbind(coef(m), confint(m))), 2)
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(trtools)
library(VGAM)
library(tidyr)
options(digits = 4, scipen = 8)
m <- glm(DW ~ log2(RC) * F, data = barnacle, family = tweedie(link.power = 0, var.power = 1.7))
#for each location estimate discrete marginal effect of RC length between 10 and 15, and 15 and 20 mm
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
m <- glm(DW ~ log2(RC) * F, data = barnacle, family = tweedie(link.power = 0, var.power = 1.7))
#for each location estimate discrete marginal effect of RC length between 10 and 15, and 15 and 20 mm
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(trtools)
library(VGAM)
library(tidyr)
options(digits = 4, scipen = 8)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibull", data = springs)
print(m)
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot hazard function
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "hazard", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Hazard Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot probability density
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Probability Density Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#estimate the expected number of thousands of cycles for each of these six stress levels
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
summary(m, newdata = d, type = "mean", tidy = TRUE)
##estimate hazards ratio with SurvRegCensCov????
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, data = springs, dist = "weibullPH")
print(m)
margeff(m,
a = list(RC = 20, F = c('barca', 'lens')),
b = list(RC = 15, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
m <- glm(DW ~ log2(RC) * F, data = barnacle, family = tweedie(link.power = 0, var.power = 1.7))
summary(m)
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
cnames = c('barca', 'lens'))
margeff(m,
a = list(RC = c(10, 15, 20) + 0.001, F = 'barca'),
b = list(RC = c(10, 15, 20), F = 'barca'),
cnames = c('@10', '@15', '@20'))
margeff(m,
a = list(RC = 15, F = c('barca', 'lens')),
b = list(RC = 10, F = c('barca', 'lens')),
type = 'percent',
cnames = c('barca', 'lens'))
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(VGAM)
library(trtools)
library(tidyr)
options(digits = 4, scipen = 8)
print(m)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibull", data = springs)
print(m)
m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
summary(m)
hazardRatio = -(-1.880)/0.614
hazardRatio
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
View(springs$stressquant)
m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
summary(m)
hazardRatio = -(-1.880)/0.614
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
plot(p)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
summary(m)
hazardRatio = -(-1.880)/0.614
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
str(springs)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
#m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
#summary(m)
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot hazard function
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "hazard", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Hazard Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot probability density
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Probability Density Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#estimate the expected number of thousands of cycles for each of these six stress levels
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
summary(m, newdata = d, type = "mean", tidy = TRUE)
##estimate hazards ratio with SurvRegCensCov????
hazardRatio = -(-1.880)/0.614
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, data = springs, dist = "weibullPH")
print(m)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
#m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
#summary(m)
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot hazard function
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "hazard", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Hazard Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot probability density
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Probability Density Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#estimate the expected number of thousands of cycles for each of these six stress levels
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
summary(m, newdata = d, type = "mean", tidy = TRUE)
##estimate hazards ratio with SurvRegCensCov????
hazardRatio = -(-1.880)/0.614
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, data = springs, dist = "weibullPH")
print(m)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
#m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
#summary(m)
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot hazard function
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "hazard", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Hazard Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot probability density
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Probability Density Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#estimate the expected number of thousands of cycles for each of these six stress levels
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
summary(m, newdata = d, type = "mean", tidy = TRUE)
##estimate hazards ratio with SurvRegCensCov????
hazardRatio = -(-1.880)/0.614
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, data = springs, dist = "weibullPH")
print(m)
knitr::opts_chunk$set(echo = TRUE)
library(SMPracticals)
library(flexsurv)
library(ggplot2)
library(SurvRegCensCov)
library(npregfast)
library(statmod)
library(VGAM)
library(trtools)
library(tidyr)
options(digits = 4, scipen = 8)
springs$stress <- as.numeric(as.character(springs$stress))
springs$stressquant <- as.numeric(as.character(springs$stress))/100
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
print(m)
#m <- survreg(formula = Surv(cycles, cens) ~ stressquant, data = springs, dist = 'weibull')
#summary(m)
#survival function plots
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "survival", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Survival Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot hazard function
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), type = "hazard", tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Hazard Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#plot probability density
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
p <- ggplot(d, aes(x = time, y = est))
p <- p + geom_line(aes(col = factor(stressquant)))
p <- p + labs(x = "Thousands of Cycles", y = "Probability", title = 'Probability Density Functions', col = 'Stress \n((newtons per square mm)/100)')
p <- p + theme_classic()
plot(p)
#estimate the expected number of thousands of cycles for each of these six stress levels
d <- data.frame(stressquant = seq(7, 9.5, by = 0.5))
summary(m, newdata = d, type = "mean", tidy = TRUE)
##estimate hazards ratio with SurvRegCensCov????
hazardRatio = -(-1.880)/0.614
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, data = springs, dist = "weibullPH")
print(m)
View(d)
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
View(d)
m <- flexsurvreg(Surv(cycles, cens) ~ stressquant, dist = "weibullPH", data = springs)
d <- summary(m, newdata = d, t = seq(0, 20000, by = 50), fn = function(t, ...) dweibull(t, ...), tidy = TRUE)
